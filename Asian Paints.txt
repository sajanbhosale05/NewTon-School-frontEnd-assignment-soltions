**Problem Statement**:
Asian Paints wants the users to be able to preview and compare how different colours will look on their walls. They also decided that limiting it to 9 walls is the best bet to not confuse the users and still give them ample colours and shades to compare.

You are a developer at Asian Paints and have decided to build a feature for this.

You designed the feature in such a way that users will be able to see 9 walls on their screen. There will be 2 input boxes and 2 buttons.

Each wall will have an id associated with it. The first input box will take the id of the wall. The second input box will take the colour from the users. The Apply button will apply the colour to the wall. The Reset button will reset the colour of the walls to transparent

Acceptance Criteria:
Create 9 walls, 2 input fields, and 2 buttons.

Each block should have a unique id corresponding to it in 1-9 and the same value. For example, the first wall will have <div id="1" value="1"></div>

The first input box that accepts the id of the wall should have id="wall_id"

The first input box that accepts the colour of the wall should have id="wall_color"

The Apply button should have id="apply"

The Reset button should have id="reset"

If Apply button is pressed, take the colour from the input#wall_color and the wall from the input #wall_id and set the colour as the background-color of the wall wall. The background-color for all other walls should turn transparent.

If Reset button is pressed, the background-color for all the blocks should turn transparent

**Solution**:
**HTML**:
<!-- html code goes here -->
<input type="number" min="1" max="9" id="wall_id">
   <input id="wall_color">
  <button id="apply" onclick="changeHandler()">Change</button>
  <button id="reset"onclick="resetHandler()">Reset</button>
 
  <div id="1" value="1"></div>
   <div id="2" value="2"></div>
    <div id="3" value="3"></div>
   <div id="4" value="4"></div>
   <div id="5" value="5"></div>
   <div id="6" value="6"></div>
   <div id="7" value="7"></div>
   <div id="8" value="8"></div>
   <div id="9" value="9"></div>

**CSS**:
div{
    width: 20px;
    height: 20px;
}
header{
    display: flex;
    
}

**JavaScript**:
// javascript code goes here
function changeHandler(){
    // document.querySelector("`#${colorid}`").style.background=`${color}`
    var divs=document.querySelectorAll("div")
    divs.forEach(function findTarget(div){
      if(div.getAttribute("id")==colorid){
        div.style.background=color

      }
      else{
        div.style.background="none"

      }
    })

  }
  function resetHandler(){
    var divs=document.querySelectorAll("div")

    divs.forEach(function findTarget(div){
      
        div.style.background="none"


    })
  }
  var coloridvalue=document.querySelector("#wall_id")
  var colorid
  var colorvalue=document.querySelector("#wall_color")
  var color
  colorvalue.addEventListener('input', updateValuecolour);
  coloridvalue.addEventListener('input', updateValueid);
  function updateValueid(e) {
    colorid= e.target.value;
  }
  function updateValuecolour(e) {
    color= e.target.value;
  }

**TestCases**:
All inputs should exist with correct ids **Passed**
All buttons should exist with correct ids **Passed**
All walls should exist with correct ids **Passed**
Users should be able to change the colour of the walls multiple times **Passed**
When Reset button is clicked, all walls should turn transparent **Passed**
Background colour should be updated for the selcted wall when Apply button is pressed **Passed**
When Reset Button is clicked, the background for all the walls should turn transparent **Passed**