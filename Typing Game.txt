**Problem Statement**:
One of my favorite time passing game is touch typing. Good command of touch typing is a very important skill, especially when it comes to productivity. Sometimes you can feel it too.
Touch typing gives leverage when you are competing with others. Also, it's fun, isn't it?

Task: Create Touch Typing Game
Description: Create a typing game which has a timer and show the typing speed in words per minute(WPM)

Acceptace criteria

Timer element ID timer

WPM element ID wpm

Container element ID container

correct, incorrect classes should be used appropriately to mark letters if user typed some letters.

Initially timer and wpm should be zero(0)

User can start the game clicking on container element

In order to start the game, start the timer and user should be able to type and see their progress in the wpm element

User can stop the game by clicking outside of container

In order to stop the game, stop the timer and set to zero(0), pause the wpm whatever it's value was and remove classes correct/incorrect from letter of the quote (make it like new rendered quote)

If user typed the rendered quote completely (doesn't matter correct/incorrect), automatically render new quote and set timer to zero(0)

Update the timer after each second by 1 (one) when game stated. Timer is showing the time passed in second.

Given formula should be used to calculate speed(wpm)

You should be using this API to get quotes. Be mindful for special letters/symbols

Use fetch() to make API calls

Use Math.round() in order to round wpm.

Time-Elapsed (sec) should be calculate using Math.floor((new Date() - startTime) / 1000)startTime ->Timestamp(when timer started)

WPM should be calculating using Math.round(parseFloat(correctStrokes()) / 5.0 / (parseFloat(Time-Elapsed(sec)) / 60.0)); Formula is shown in the picture

Update the wpm on each-stroke(doesn't matter correct/incorrect)

Input should be given to body tag. Hint add event listner to document.

Use keydown event for input. Hint: e.key/e.keyCode

Try to make it interactive/engaging/awsome. Happy coding :)
question
<img src="https://d3dyfaf3iutrxo.cloudfront.net/thumbnail/assignment/question/eabbd6402cf24ef0b27e3b9b87bbb972.png" alt="Typing Game">

**Solution**:
**HTML**:

<!-- html code goes here -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Typing Game</title>
    <link rel="stylesheet" href="style.css">
    <link rel="icon" href="/typing.jpg">
</head>
<body>
    <label for="Timer" class="timerLabel">Timer</label>
    <div class="timer" id="timer">0</div>
    <label for="wpm" class="wpmLabel">WPM</label>
    <div class="wpm" id="wpm">0</div>
    <div class="container" id="container">
      <div class="quote-display" id="quoteDisplay"></div>
    </div>
    <script src="app.js"></script>
</body>
</html>

**CSS**:

- {
  box-sizing: border-box;
  }
  body {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  margin: 0;
  background-color: rgb(175, 175, 201);
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
  }

  .container {
  background-color: yellow;
  padding: 1rem;
  border-radius: 0.5rem;
  width: 700px;
  max-width: 90%;
  border: 1px solid black;
  }

  .wpm,
  .wpmLabel {
  color: rgb(175, 78, 88);
  position: absolute;
  top: 6rem;
  font-size: 3rem;
  font-weight: bold;
  }

  .timer,
  .timerLabel {
  position: absolute;
  top: 2rem;
  font-size: 3rem;
  color: yellow;
  font-weight: bold;
  }
  .timerLabel,
  .wpmLabel {
  left: 50rem;
  }

  .quote-display {
  margin-bottom: 1rem;
  /_ margin-left: ;
  margin-left: calc(1rem - 2px); _/
  }
  .container-focus {
  border: 3px solid black;
  }

  .quote-display .correct {
  color: green;
  }

  .incorrect {
  color: red;
  text-decoration: underline;
  }

**JavaScript**:
// javascript code goes here

const RANDOM_QUOTE_API_URL = "http://api.quotable.io/random";
const container = document.getElementById("container");
const quoteDisplayElement = document.getElementById("quoteDisplay");
const timerElement = document.getElementById("timer");
const wpmElement = document.getElementById("wpm");

var timerID;
var isTimerStated = false;
var quote;
var currentIndex = 0;
var strokes;

window.addEventListener("click", (e) => {
if (document.getElementById("container").contains(e.target)) {
if (!isTimerStated) {
container.classList.add("container-focus");
startTimer();
}
} else {
container.classList.remove("container-focus");
timerElement.innerText = 0;
stopTimer();
currentIndex = 0;
quoteDisplayElement.childNodes.forEach((node) => {
node.classList.remove("correct");
node.classList.remove("incorrect");
});
}
});

function calcualtewpm() {
if (getTimerTime() > 0) {
wpmElement.innerText = Math.round(
parseFloat(correctStrokes()) / 5.0 / (parseFloat(getTimerTime()) / 60.0)
);
}
// console.log("wpm", correctStrokes(), getTimerTime());
}
window.addEventListener("keydown", (e) => {
if (isTimerStated) {
var charCode = e.keyCode;
if (
(charCode > 64 && charCode < 91) ||
(charCode > 96 && charCode < 123) ||
charCode === 32 ||
charCode === 188 ||
charCode === 186 ||
charCode === 222 ||
charCode === 190 ||
charCode === 191 ||
charCode === 49 ||
charCode === 189
) {
if (quote[currentIndex] == e.key) {
quoteDisplayElement.childNodes[currentIndex].classList.add("correct");
quoteDisplayElement.childNodes[currentIndex].classList.remove(
"incorrect"
);
strokes[currentIndex] = 1;
} else {
quoteDisplayElement.childNodes[currentIndex].classList.add("incorrect");
quoteDisplayElement.childNodes[currentIndex].classList.remove(
"correct"
);
strokes[currentIndex] = 0;
}
calcualtewpm();
currentIndex++;
if (currentIndex === quote.length) {
currentIndex = 0;
renderNewQuote();
}
} else if (charCode === 8) {
if (currentIndex === 0) return;
currentIndex--;
quoteDisplayElement.childNodes[currentIndex].classList.remove("correct");
quoteDisplayElement.childNodes[currentIndex].classList.remove(
"incorrect"
);
} else {
console.log("not a key");
}
}
});

const getRandomQuote = () => {
return fetch(RANDOM_QUOTE_API_URL)
.then((response) => response.json())
.then((data) => data.content);
};

function correctStrokes() {
let count = 0;
strokes.forEach((stroke) => {
if (stroke) count++;
});
return count;
}

const renderNewQuote = async () => {
quote = await getRandomQuote();
if (isTimerStated) {
stopTimer();
startTimer();
}
currentIndex = 0;
strokes = new Array(quote.length);
strokes.fill(0);
quoteDisplayElement.innerHTML = "";
quote.split("").forEach((char) => {
const charSpan = document.createElement("span");
charSpan.innerText = char;
quoteDisplayElement.appendChild(charSpan);
});
};

let startTime;
function startTimer() {
isTimerStated = true;
timerElement.innerText = 0;
startTime = new Date();
timerID = setInterval(() => {
timer.innerText = getTimerTime();
}, 1000);
}

function getTimerTime() {
return Math.floor((new Date() - startTime) / 1000);
}
function stopTimer() {
isTimerStated = false;
clearInterval(timerID);
}

renderNewQuote();

**TestCases**:
Type(some letters) -> Click(outside the container) -> Click(inside the container) -> Type(some letters), should be able to show correct value of WPM and Timer **Passed**
Outside click of container should not change 'wpm' **Passed**
Outside click of container should remove correct/incorrect classes from quote letters
Should not able to type when clicked outside of div container **Passed**
Should able to see/change 'WPM' typing speed **Passed**
Should able to type by clicking on "container" div when input should be given to "body" Tag **Passed**
Typing Game should make api calls and render Quote **Passed**
Should be able to set timer zero each timer fetched/rendered new Quote **Passed**
Should stop Timer by clicking outside of 'container' div and set to 0 **Passed**
Given formula Should be used to calculate WPM **Passed**
Should be able to fetch and render a new quote if a user typed the rendered quote (automatic) **Passed**
Backspace should able to clear typed letters **Passed**
Correctly typed letters should have correct class **Passed**
Wrongly typed letters should have 'incorrect' class **Passed**
Should start Timer by clicking on 'container' div **Passed**
Timer and WPM should be zero initially **Passed**
Typing Game application should be rendered **Passed**
